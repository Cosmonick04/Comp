% dealing with vairables
x=3.5:
 x=3.5:
       ↑
{Error: Invalid expression. Check for missing or extra characters.
} 
x=3.5;
y=x^2+2x-3;
 y=x^2+2x-3;
        ↑
{Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of parentheses.
} 
y=x^2+2*x-3;
clear x
y=x^2+2*x-3;
{Unrecognized function or variable 'x'.
} 
disp('tezt')
tezt
disp('tezt');
tezt
sqrt(13)

ans =

    3.6056

pi

ans =

    3.1416

sqrt(-23)

ans =

   0.0000 + 4.7958i

cos(pi)

ans =

    -1

%always use atan2 instead of atan !!!
help atan2
 <strong>atan2</strong>  Four quadrant inverse tangent.
    <strong>atan2</strong>(Y,X) is the four quadrant arctangent of the elements of X and Y
    such that -pi <= <strong>atan2</strong>(Y,X) <= pi. X and Y must have compatible sizes.
    In the simplest cases, they can be the same size or one can be a
    scalar. Two inputs have compatible sizes if, for every dimension, the
    dimension sizes of the inputs are either the same or one of them is 1.
 
    See also <a href="matlab:help atan -displayBanner">atan</a>, <a href="matlab:help atan2d -displayBanner">atan2d</a>.

    <a href="matlab:doc atan2">Documentation for atan2</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('atan2')">Other uses of atan2</a>

% build list of independant variables
clear
x= [-5:5]

x =

    -5    -4    -3    -2    -1     0     1     2     3     4     5

x2= [-5:0.1:5];
y = x^2 -3*x+2
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mpower')" style="font-weight:bold"> ^ </a>
Incorrect dimensions for raising a matrix to a power. Check that the matrix is square and the
power is a scalar. To operate on each element of the matrix individually, use POWER (.^) for
elementwise power.
} 
y = x.^2 -3*x+2

y =

    42    30    20    12     6     2     0     0     2     6    12

y = x2.^2 -3*x2+2

y =

  Columns 1 through 9

   42.0000   40.7100   39.4400   38.1900   36.9600   35.7500   34.5600   33.3900   32.2400

  Columns 10 through 18

   31.1100   30.0000   28.9100   27.8400   26.7900   25.7600   24.7500   23.7600   22.7900

  Columns 19 through 27

   21.8400   20.9100   20.0000   19.1100   18.2400   17.3900   16.5600   15.7500   14.9600

  Columns 28 through 36

   14.1900   13.4400   12.7100   12.0000   11.3100   10.6400    9.9900    9.3600    8.7500

  Columns 37 through 45

    8.1600    7.5900    7.0400    6.5100    6.0000    5.5100    5.0400    4.5900    4.1600

  Columns 46 through 54

    3.7500    3.3600    2.9900    2.6400    2.3100    2.0000    1.7100    1.4400    1.1900

  Columns 55 through 63

    0.9600    0.7500    0.5600    0.3900    0.2400    0.1100         0   -0.0900   -0.1600

  Columns 64 through 72

   -0.2100   -0.2400   -0.2500   -0.2400   -0.2100   -0.1600   -0.0900         0    0.1100

  Columns 73 through 81

    0.2400    0.3900    0.5600    0.7500    0.9600    1.1900    1.4400    1.7100    2.0000

  Columns 82 through 90

    2.3100    2.6400    2.9900    3.3600    3.7500    4.1600    4.5900    5.0400    5.5100

  Columns 91 through 99

    6.0000    6.5100    7.0400    7.5900    8.1600    8.7500    9.3600    9.9900   10.6400

  Columns 100 through 101

   11.3100   12.0000

y = x2.^2 -3*x2+2;
plot (x2,y)
x2label( 'x);
 x2label( 'x);
          ↑
{Error: Character vector is not terminated properly.
} 
x2label('x');
{Unrecognized function or variable 'x2label'.
} 
xlabel('x')
plot (x2,y)
xlabel('x')
ylabel('y')
run myscript
>0
myvar = 2

myvar =

     2

run myscript
>0
myscript
>0
myvar = 0

myvar =

     0

myvar = -4

myvar =

    -4

run myscript
>0
run myscript
greater
myvar = 0

myvar =

     0

run myscript
greater
myvar=15

myvar =

    15

myvar=0

myvar =

     0

run myscript
greater
myvar=0;
run myscript

myvar =

     0

equals
myvar= 10

myvar =

    10

run myscript
greater
x=
 x=
   ↑
{Error: Invalid expression. Check for missing or extra characters.
} 
run myscript
greater

x =

    -5


x =

    -4


x =

    -3


x =

    -2


x =

    -1


x =

     0


x =

     1


x =

     2


x =

     3


x =

     4


x =

     5


x =

     6


x =

     7


x =

     8


x =

     9


x =

    10


z =

     2


z =

     3


z =

     4


z =

     5


z =

     6


z =

     7


z =

     8


z =

     9


z =

    10


z =

    11

y = myquad(1, -2, 1)
{Unrecognized function or variable 'myquad'.
} 
y = quad(1, -2, 1)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('fcnchk')" style="font-weight:bold">fcnchk</a>
FUN must be a function, a valid character vector expression, or an inline function object.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('quad', 'C:\Program Files\MATLAB\R2023a\toolbox\matlab\funfun\quad.m', 57)" style="font-weight:bold">quad</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2023a\toolbox\matlab\funfun\quad.m',57,0)">line 57</a>)
f = fcnchk(funfcn);
} 
y = myquad(1, -2, 1)
{<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',3,22)">File: myquad.m Line: 3 Column: 22</a>
Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of
parentheses.
} 
y = myquad(1, -2, 1)
{<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',3,21)">File: myquad.m Line: 3 Column: 21</a>
Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of
parentheses.
} 
help funtion
--- <strong>funtion</strong> not found. Showing help for <strong>function</strong> instead. ---

 <strong>function</strong> Add new function.
    New functions may be added to MATLAB's vocabulary if they
    are expressed in terms of other existing functions. The 
    commands and functions that comprise the new function must
    be put in a file whose name defines the name of the new 
    function, with a filename extension of '.m'. At the top of
    the file must be a line that contains the syntax definition
    for the new function. For example, the existence of a file 
    on disk called stat.m with:
  
            function [mean,stdev] = stat(x)
            %STAT Interesting statistics.
            n = length(x);
            mean = sum(x) / n;
            stdev = sqrt(sum((x - mean).^2)/n);
  
    defines a new function called STAT that calculates the 
    mean and standard deviation of a vector. The variables
    within the body of the function are all local variables.
    See SCRIPT for procedures that work globally on the work-
    space. 
 
    A subfunction that is visible to the other functions in the
    same file is created by defining a new function with the <strong>function</strong>
    keyword after the body of the preceding function or subfunction.
    For example, avg is a subfunction within the file stat.m:
 
           function [mean,stdev] = stat(x)
           %STAT Interesting statistics.
           n = length(x);
           mean = avg(x,n);
           stdev = sqrt(sum((x-avg(x,n)).^2)/n);
 
           %-------------------------
           function mean = avg(x,n)
           %AVG subfunction
           mean = sum(x)/n;
 
    Subfunctions are not visible outside the file where they are defined.
 
    You can terminate any function with an END statement but, in most
    cases, this is optional. END statements are required only in MATLAB files 
    that employ one or more nested functions. Within such a file, 
    every function (including primary, nested, private, and subfunctions)
    must be terminated with an END statement. You can terminate any 
    function type with END, but doing so is not required unless the 
    file contains a nested function.
 
    Normally functions return when the end of the function is reached.
    A RETURN statement can be used to force an early return.
 
    See also <a href="matlab:help script -displayBanner">script</a>, <a href="matlab:help return -displayBanner">return</a>, <a href="matlab:help varargin -displayBanner">varargin</a>, <a href="matlab:help varargout -displayBanner">varargout</a>, <a href="matlab:help nargin -displayBanner">nargin</a>, <a href="matlab:help nargout -displayBanner">nargout</a>, 
             <a href="matlab:help inputname -displayBanner">inputname</a>, <a href="matlab:help mfilename -displayBanner">mfilename</a>.

    <a href="matlab:doc function">Documentation for function</a>
    <a href="matlab:matlab.internal.help.displayFoldersList('function')">Folders named function</a>

y = myquad(1, -2, 1)
{<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',3,21)">File: myquad.m Line: 3 Column: 21</a>
Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of
parentheses.
} 
y = myquad(1, -2, 1)
{<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',3,20)">File: myquad.m Line: 3 Column: 20</a>
Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of
parentheses.
} 
y = myquad(1, -2, 1)
{<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',3,20)">File: myquad.m Line: 3 Column: 20</a>
Invalid expression. Check for missing multiplication operator, missing or unbalanced
delimiters, or other syntax error. To construct matrices, use brackets instead of
parentheses.
} 
y = myquad(1, -2, 1)

s =

    2.8284

{Output argument "y" (and possibly others) not assigned a value in the execution with "myquad"
function.
} 
y = myquad(1, -2, 1)

s =

    2.8284


y =

    2.4142   -0.4142


y =

    2.4142   -0.4142

y = myquad(1, -2, 1)

s =

    2.8284

{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('disp')" style="font-weight:bold">disp</a>
Too many input arguments.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('myquad', 'C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m', 6)" style="font-weight:bold">myquad</a> (<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',6,0)">line 6</a>)
    disp(x1,x2)
} 
y = myquad(1, -2, 1)

s =

    2.8284

    2.4142

   -0.4142

{Output argument "y" (and possibly others) not assigned a value in the execution with "myquad"
function.
} 
y = myquad(1, -2, 1)

s =

    2.8284


x1 =

    2.4142


x2 =

   -0.4142


y =

  1×0 empty <a href="matlab:helpPopup double" style="font-weight:bold">double</a> row vector


y =

  1×0 empty <a href="matlab:helpPopup double" style="font-weight:bold">double</a> row vector

y = myquad(1, -2, 1)

s =

    2.8284


x1 =

    2.4142


x2 =

   -0.4142

{Output argument "y" (and possibly others) not assigned a value in the execution with "myquad"
function.
} 
y = myquad(1, -2, 1)

s =

     0


x1 =

     1


x2 =

     1

{Output argument "y" (and possibly others) not assigned a value in the execution with "myquad"
function.
} 
y = myquad(1, -2, 1)

s =

     0


x1 =

     1


x2 =

     1


y =

     1


y =

     1

y = myquad(1, -2, 1)

s =

     0


x1 =

     1


x2 =

     1


y =

     1     1


y =

     1     1

y = myquad(1, -2, 1)

s =

     0


x1 =

     1


x2 =

     1


y =

     1
     1


y =

     1
     1

y = myquad(1, -2, 1)
<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',4,1)">4   </a>    s = sqrt(b^2 - 4*a*c)
y = myquad(1, -2, 1)
<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',4,1)">4   </a>    s = sqrt(b^2 - 4*a*c)
y = myquad(1, -2, 1)
<a href="matlab: opentoline('C:\Users\nick\OneDrive\Documents\MATLAB\myquad.m',4,1)">4   </a>    s = sqrt(b^2 - 4*a*c)
if system_dependent('IsDebugMode')==1, dbstep out; end

s =

     0


x1 =

     1


x2 =

     1


y =

     1
     1

if system_dependent('IsDebugMode')==1, dbstep out; end

s =

     0


x1 =

     1


x2 =

     1


y =

     1
     1

dbup 1;
dbdown 1;
if system_dependent('IsDebugMode')==1, dbquit; end
y = myquad(1, -2, 1)

y =

     1
     1

y = myquad(1, -2, 1)

y =

     1
     1

y = myquad(1, -2, 1)

y =

     1     1

y = myquad(1, -2, 1)

y =

     1     1

y = myquad(1, -2, 1)
{Output argument "y" (and possibly others) not assigned a value in the execution with "myquad"
function.
} 
y = myquad(1, -2, 1)

y =

     1     1

